create database learnsql;

use learnsql;
CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    gender VARCHAR(10),
    course VARCHAR(50),
    city VARCHAR(50)
);

INSERT INTO students (name, age, gender, course, city) VALUES
('Ravi', 21, 'Male', 'Java', 'Delhi'),
('Anjali', 22, 'Female', 'Python', 'Mumbai'),
('Rohan', 20, 'Male', 'Java', 'Delhi'),
('Priya', 23, 'Female', 'C++', 'Kolkata'),
('Amit', 22, 'Male', 'Java', 'Delhi'),
('Neha', 21, 'Female', 'Python', 'Bangalore');


-- Module 1: SQL Basics ‚Äì SELECT Mastery
-- üéØ Objective:
-- Understand how to retrieve data from a table

-- Learn SQL keywords: SELECT, FROM, WHERE, DISTINCT, AS, LIMIT --

select * from students;


-- Q1: Show all columns of all students

select * from students;

-- Q2: Show only the names and courses of all students

select name ,course from students;

-- Q3: Show names and ages of students who are older than 21

select name , age from students where age >21;

-- Q4: Show the names of students who live in Delhi

select name from students where city='Delhi';

-- Q5: Show distinct course names (no repetition)

select  distinct(course) from students ;

-- Q6: Show all students who are enrolled in Java course

select name from students where course="java";

-- Q7: Show top 3 student records from the table

select * from students order by id asc limit 3;

-- Q8: Show names of female students only

select * from students where gender='female';

-- Q9: Show name AS 'Student Name', course AS 'Enrolled Course'

select name as ' student nam ' , course as 'Enroller course' from students ;

-- Q10: Show students who live in Bangalore or Kolkata

select * from students where city='Bangalore' or city='Kolkata';


-- MODULE 2---

-- üß© Module 2: Filtering & Searching in SQL
-- üîç Core Concepts:
-- Concept	Purpose
-- WHERE	Apply conditions
-- AND / OR	Combine multiple conditions
-- IN	Match value from a list
-- BETWEEN	Match a range (inclusive)
-- LIKE	Match partial patterns (wildcards)
-- IS NULL / IS NOT NULL	Check for NULL values
-- NOT	Negate any condition

-- Q1: Show students who live in Delhi AND are enrolled in Java

select * from students where city="Delhi" and course="java";
-- Q2: Show students whose age is between 21 and 24

select * from students where age  between 21 and 24;

-- Q3: Show students whose city is either Mumbai, Chennai or Delhi

select * from students where city in('mumbai','chennai','Delhi');

-- Q4: Show students whose name starts with 'D'

select * from students where name like 'A%';

-- Q5: Show students who haven't provided a phone number

select * from students where mobilenum is null;

-- Q6: Show students who are NOT enrolled in Java course

select * from students where course not in ('java');

-- Q7: Show students who are either female OR under age 21

select * from students where age <21 or gender='female';

-- Q8: Show students whose name ends with 'a'

select * from students where name like '%a';

-- Q9: Show students with phone number containing '123'


SELECT * FROM students WHERE mobilenum LIKE '%123%';

-- Q10: Show students whose age is NOT between 21 and 24
select * from students  where age not between 21 and 24;
 

‚úÖ Module 2: SQL WHERE Clause ‚Äì Cheat Sheet
Concept	Syntax	Example

Basic WHERE	SELECT * FROM table WHERE column = value;	SELECT * FROM students WHERE city = 'Delhi';

NOT Equal	!= or <>	SELECT * FROM students WHERE course != 'Java';

IN Clause	column IN (val1, val2, ...)	SELECT * FROM students WHERE city IN ('Delhi', 'Mumbai');

NOT IN Clause	column NOT IN (val1, val2, ...)	SELECT * FROM students WHERE course NOT IN ('Java', 'Python');

BETWEEN	column BETWEEN low AND high	SELECT * FROM students WHERE age BETWEEN 20 AND 25;

NOT BETWEEN	column NOT BETWEEN low AND high	SELECT * FROM students WHERE age NOT BETWEEN 20 AND 25;

LIKE (Starts)	column LIKE 'A%'	SELECT * FROM students WHERE name LIKE 'A%';

LIKE (Ends)	column LIKE '%a'	SELECT * FROM students WHERE name LIKE '%a';

LIKE (Contains)	column LIKE '%n%'	SELECT * FROM students WHERE name LIKE '%n%';

LIKE (Exact Length)	LIKE '____'	SELECT * FROM students WHERE name LIKE '____';

IS NULL	column IS NULL	SELECT * FROM students WHERE mobileNum IS NULL;

IS NOT NULL	column IS NOT NULL	SELECT * FROM students WHERE course IS NOT NULL;

AND Condition	cond1 AND cond2	SELECT * FROM students WHERE city='Delhi' AND course='Java';

OR Condition	cond1 OR cond2	SELECT * FROM students WHERE age<20 OR gender='female';

NOT	NOT condition	SELECT * FROM students WHERE NOT city='Delhi';

Combine Conditions	(cond1 AND cond2) OR cond3	SELECT * FROM students WHERE (age > 21 AND gender='male') OR city='Mumbai';






-- MODULE 3: ORDER BY, LIMIT, SORTING & PAGINATION
-- ===============================================

-- 1. ORDER BY Clause
-- Sort rows based on a specific column.

SELECT * FROM students
ORDER BY age;  -- Sorts by age in ascending order (default)

SELECT * FROM students
ORDER BY name DESC;  -- Sorts by name in descending order

-- 2. ORDER BY with multiple columns
-- Sort by course (asc), and then by age (desc)

SELECT * FROM students
ORDER BY course ASC, age DESC;

-- 3. LIMIT Clause
-- Returns only a specific number of rows

SELECT * FROM students
LIMIT 5;  -- Show only first 5 records

SELECT * FROM students
ORDER BY age DESC
LIMIT 3;  -- Show top 3 oldest students

-- 4. LIMIT with OFFSET (Pagination)
-- LIMIT offset, row_count format

SELECT * FROM students
ORDER BY id
LIMIT 5, 5;  -- Skip first 5 rows, return next 5 (i.e., page 2)

-- OR you can use OFFSET keyword (standard)

SELECT * FROM students
ORDER BY id
LIMIT 5 OFFSET 5;  -- Same as above

-- 5. WHERE + ORDER BY + LIMIT
-- Powerful combo for filtering + sorting + limiting

SELECT name, age
FROM students
WHERE city = 'Delhi'
ORDER BY age DESC
LIMIT 3;  -- Top 3 oldest students from Delhi

-- 6. ORDER BY with alias
-- You can use aliases too

SELECT name AS student_name, course AS enrolled_course
FROM students
ORDER BY student_name;

-- 7. Sorting string and numeric columns
-- Text columns sort alphabetically, number columns numerically

SELECT * FROM students
ORDER BY gender;  -- F -> M (alphabetical)

SELECT * FROM students
ORDER BY age DESC;  -- Highest age first

-- 8. LIMIT with WHERE for filtering specific data only

SELECT * FROM students
WHERE course = 'java'
ORDER BY age
LIMIT 2;  -- Youngest 2 Java students

-- 9. LIMIT 1 (Use for top or latest record)

SELECT * FROM students
ORDER BY created_at DESC
LIMIT 1;  -- Latest student added

-- 10. Use COUNT(*) with ORDER BY for analysis

SELECT course, COUNT(*) AS total_students
FROM students
GROUP BY course
ORDER BY total_students DESC;
-- Which course has most students?









-- module 3
 
 -- üß† Module 3: Aggregate Functions + GROUP BY
-- This is one of the most important modules in SQL‚Äîused in reporting, analytics, and real-world apps.
 
 CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer VARCHAR(50),
    city VARCHAR(50),
    amount INT,
    payment_method VARCHAR(20)
);


INSERT INTO orders (order_id, customer, city, amount, payment_method) VALUES
(1, 'Ravi',  'Delhi',   1000, 'UPI'),
(2, 'Ravi',  'Delhi',    500, 'Card'),
(3, 'Priya', 'Mumbai',   800, 'UPI'),
(4, 'Ravi',  'Delhi',   1200, 'Cash'),
(5, 'Priya', 'Mumbai',   300, 'UPI'),
(6, 'Meena', 'Kolkata',  700, 'UPI'),
(7, 'Karan', 'Delhi',   2000, 'Cash'),
(8, 'Meena', 'Kolkata',  300, 'Card'),
(9, 'Karan', 'Delhi',    500, 'Card'),
(10,'Priya', 'Mumbai',   100, 'UPI');


select * from orders;

-- Q1: Total amount spent by each customer
SELECT customer, SUM(amount) AS total_spent
FROM orders
GROUP BY customer;

-- Q2: Number of orders per city
SELECT city, COUNT(*) AS total_orders
FROM orders
GROUP BY city;

-- Q3: Show customers who spent more than 1500 total
SELECT customer, SUM(amount) AS total_spent
FROM orders
GROUP BY customer
HAVING SUM(amount) > 1500;

-- Q4: Count number of UPI payments per city
SELECT city, COUNT(*) AS upi_count
FROM orders
WHERE payment_method = 'UPI'
GROUP BY city;

-- Q5: Show cities where total order amount is less than 2000
SELECT city, SUM(amount) AS city_total
FROM orders
GROUP BY city
HAVING SUM(amount) < 2000;

-- Q6: Show customers who placed more than 2 orders
SELECT customer, COUNT(*) AS total_orders
FROM orders
GROUP BY customer
HAVING COUNT(*) > 2;

-- Q7: Show city-wise average order amount
SELECT city, AVG(amount) AS avg_amount
FROM orders
GROUP BY city;

-- Q8: Show customers who used more than one payment method
SELECT customer, COUNT(DISTINCT payment_method) AS methods_used
FROM orders
GROUP BY customer
HAVING COUNT(DISTINCT payment_method) > 1;

-- Q9: Show customers whose maximum single order was over 1000
SELECT customer, MAX(amount) AS max_order
FROM orders
GROUP BY customer
HAVING MAX(amount) > 1000;

-- Q10: Show customers whose average order is less than 700
SELECT customer, AVG(amount) AS avg_order
FROM orders
GROUP BY customer
HAVING AVG(amount) < 700;


-- Q1: Show total number of orders per customer

select customer , count(*) as orderpercustomer from orders group by customer;

-- Q2: Show total amount spent per city

select city , sum(amount) as  ampountspentpercity from  orders group by city;

-- Q3: Show count of orders per payment method

select * from orders;

select payment_method , count(*) from orders group by payment_method;

-- Q4: Show customers who have placed more than 3 orders
select customer , count(*) totalorder from orders group by customer ;

select customer , count(*) totalorder from orders group by customer having totalorder>=3;

-- Q5: Show cities where total amount spent is more than ‚Çπ5000

select city , avg(amount) as spentamount from orders group by city having spentamount<5000;

-- Q6: Show average amount per customer

select customer ,avg(amount) from orders group by customer;

-- Q7: Show customers whose average order value is less than ‚Çπ700

select customer , avg(amount) as avgorder from orders group by customer having avgorder<700;

-- Q8: Show total number of orders and total amount for each payment method

select * from orders;

select payment_method, sum(amount) , count(*) as totalNOofpaymet from orders group by payment_method; 

-- Q9: Show customers who have used more than 1 payment method

select  customer , count(payment_method) as total from orders group by customer having total >1;

-- Q10: Show cities where number of cash orders is more than 2
select * from orders;
SELECT city, COUNT(*) AS total_cash_orders
FROM orders
WHERE payment_method = 'cash'
GROUP BY city
HAVING COUNT(*) >=1;

-- Q11: Show maximum and minimum order amount per customer

-- Q12: Show cities where customers placed at least 3 orders

-- Q13: Show payment methods used by customers from ‚ÄòDelhi‚Äô

-- Q14: Show customers whose total spent amount is more than ‚Çπ2000

-- Q15: Show customers who have at least one order of more than ‚Çπ1000



